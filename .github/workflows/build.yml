name: build
on: [push, pull_request]

jobs:
  build:
    name: MsBuild
    runs-on: windows-latest

    strategy:
      matrix:
        platform:
          - x64
        config:
          - Debug
          - Release

    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        submodules: 'true'

    - name: Cache ThirdPartyLibraries
      id: cache-packages
      uses: actions/cache@v2
      with:
        path: OpenCppCoverage\packages
        key: ${{ runner.os }}-packages
        restore-keys: ${{ runner.os }}-packages

    - name: Install third party libraries
      if: steps.cache-packages.outputs.cache-hit != 'true'
      working-directory: OpenCppCoverage
      run: .\InstallThirdPartyLibraries.ps1

    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v1

    - name: Build OpenCppCoverage
      working-directory: OpenCppCoverage
      run: MsBuild.exe /p:Platform=${{ matrix.platform }},Configuration=${{ matrix.config }} /t:Build

    - name: Link packages
      run: New-Item -Type SymbolicLink packages -Value OpenCppCoverage\packages

    - name: Build
      run: MsBuild.exe /p:Platform=${{ matrix.platform }},Configuration=${{ matrix.config }} /t:Build

    - name: Run test
      run: |
        Copy-Item ${{ matrix.platform }}\${{ matrix.config }}\XmlExporter.dll OpenCppCoverage\${{ matrix.platform }}\${{ matrix.config }}\Plugins\Exporter\xml.dll
        ${{ matrix.platform }}\${{ matrix.config }}\XmlExporter.Test.exe
        Copy-Item LICENSE ${{ matrix.platform }}\${{ matrix.config }}\
        Copy-Item README.md ${{ matrix.platform }}\${{ matrix.config }}\

    - name: Upload 
      if: ${{ matrix.config == 'Release' }}
      uses: actions/upload-artifact@v2
      with:
        name: XmlExporter-${{ matrix.platform }}
        path: |
          ${{ matrix.platform }}\${{ matrix.config }}\LICENSE
          ${{ matrix.platform }}\${{ matrix.config }}\XmlExporter.dll
          ${{ matrix.platform }}\${{ matrix.config }}\README.md

  sonar:
    name: SonarCloud
    runs-on: windows-latest
    env:
      # Platform type to build.
      BUILD_PLATFORM: x64

      # Configuration type to build.
      BUILD_CONFIGURATION: Release

    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        submodules: 'true'

    - name: Cache ThirdPartyLibraries
      id: cache-packages
      uses: actions/cache@v2
      with:
        path: OpenCppCoverage\packages
        key: ${{ runner.os }}-packages
        restore-keys: ${{ runner.os }}-packages

    - name: Install third party libraries
      if: steps.cache-packages.outputs.cache-hit != 'true'
      working-directory: OpenCppCoverage
      run: .\InstallThirdPartyLibraries.ps1

    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v1

    - name: Build OpenCppCoverage
      working-directory: OpenCppCoverage
      run: MsBuild.exe /p:Platform=${{ env.BUILD_PLATFORM }},Configuration=${{ env.BUILD_CONFIGURATION }} /t:Build

    - name: Link packages
      run: New-Item -Type SymbolicLink packages -Value OpenCppCoverage\packages

    - name: Fetch Build-Wrapper
      working-directory: ${{ runner.temp }}
      run: |
        Invoke-WebRequest -OutFile build-wrapper-win-x86.zip https://sonarcloud.io/static/cpp/build-wrapper-win-x86.zip
        7z x build-wrapper-win-x86.zip

    - name: Build with Build-Wrapper
      run: ${{ runner.temp }}\build-wrapper-win-x86\build-wrapper-win-x86-64.exe --out-dir bw-output MsBuild.exe /p:Platform=${{ env.BUILD_PLATFORM }},Configuration=${{ env.BUILD_CONFIGURATION }} /t:ReBuild

    - name: Install XmlExporter
      run: Copy-Item ${{ env.BUILD_PLATFORM }}\${{ env.BUILD_CONFIGURATION }}\XmlExporter.dll OpenCppCoverage\${{ env.BUILD_PLATFORM }}\${{ env.BUILD_CONFIGURATION }}\Plugins\Exporter\xml.dll

    - name: Run XmlExporterTest
      shell: cmd
      run: .\OpenCppCoverage\${{ env.BUILD_PLATFORM }}\${{ env.BUILD_CONFIGURATION }}\OpenCppCoverage.exe
          --export_type xml:xmlexporter-coverage.xml
          --cover_children
          --sources ${{ github.workspace }}
        --working_dir ${{ github.workspace }}\${{ env.BUILD_PLATFORM }}\${{ env.BUILD_CONFIGURATION }}
          --
          ${{ env.BUILD_PLATFORM }}\${{ env.BUILD_CONFIGURATION }}\XmlExporter.Test.exe

    - name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: 11

    - name: Cache SonarCloud packages
      uses: actions/cache@v2
      with:
        path: ~\.sonar\cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar

    - name: Fetch SonarScannerCLI
      working-directory: ${{ runner.temp }}
      run: |
        Invoke-WebRequest -OutFile sonar-scanner-cli-4.4.0.2170-windows.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.4.0.2170-windows.zip
        7z x sonar-scanner-cli-4.4.0.2170-windows.zip

    - name: Cache SonarCloud scanner
      uses: actions/cache@v2
      with:
        path: ${{ runner.temp }}\sonar-scanner-cli-4.4.0.2170-windows
        key: ${{ runner.os }}-sonar-scanner
        restore-keys: ${{ runner.os }}-sonar-scanner

    - name: Cache SonarCloud scanner cache
      uses: actions/cache@v2
      with:
        path: ${{ runner.temp }}\sonar-scanner-cache
        key: ${{ runner.os }}-sonar-scanner-cache
        restore-keys: ${{ runner.os }}-sonar-scanner-cache

    - name: Analyze with SonarScannerCLI
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_ORGANIZATION: ${{ secrets.SONAR_ORGANIZATION }}
        SONAR_PROJECTKEY: ${{ secrets.SONAR_PROJECTKEY }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        CMD_SCANNER: '${{ runner.temp }}\sonar-scanner-4.4.0.2170-windows\bin\sonar-scanner.bat'
      shell: cmd
      run: ${{ env.CMD_SCANNER }}
        -D"sonar.organization=${{ env.SONAR_ORGANIZATION }}"
        -D"sonar.projectKey=${{ env.SONAR_PROJECTKEY }}"
        -D"sonar.host.url=https://sonarcloud.io"
        -D"sonar.sourceEncoding=UTF-8"
        -D"sonar.sources=XmlExporter"
        -D"sonar.cfamily.build-wrapper-output=bw-output"
        -D"sonar.cfamily.cache.enabled=true"
        -D"sonar.cfamily.cache.path=${{ runner.temp }}\sonar-scanner-cache"
        -D"sonar.cfamily.threads=2"
        -D"sonar.coverageReportPaths=xmlexporter-coverage.xml"
